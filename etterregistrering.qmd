# Etterregistrering av formidling

<span style="color:red;">
NB! Dette er ikke offisiell statistikk og må ikke deles utenfor NAV.
</span>

```{python}
from google.cloud.bigquery import Client
import pandas as pd
import plotly.graph_objects as go
```

```{python}
project = "toi-prod-324e"
bq_client = Client(project)
```

```{python}
query = f"""
    select
        FORMAT_DATETIME('%Y-%m', u.tidspunkt) as tidspunkt_utfall_yearmonth,
        vk.stillingskategori,
        count(*) as antall
    from `rekrutteringsbistand_kandidat.utfallsendring` u
        inner join `rekrutteringsbistand_kandidat.veilkandidat` v on u.veilkandidat_db_id = v.db_id
        inner join `rekrutteringsbistand_kandidat.veilkandliste` vk on v.veilkandliste_db_id = vk.db_id
    where u.nytt_utfall = 'FATT_JOBBEN'
        and vk.stillingskategori IN ('STILLING', 'FORMIDLING')
    group by tidspunkt_utfall_yearmonth, vk.stillingskategori
    order by tidspunkt_utfall_yearmonth
    """
df_synlige = bq_client.query(query=query).to_dataframe()
```

```{python}
query = f"""
    select
        FORMAT_DATETIME('%Y-%m', DATE(TIMESTAMP_MILLIS(CAST(lagt_til_tidspunkt/1000000 AS INT64)))) as tidspunkt_utfall_yearmonth,
        vk.stillingskategori,
        count(*) as antall
    from `rekrutteringsbistand_kandidat.formidlingavusynligkandidat` fk
        inner join `rekrutteringsbistand_kandidat.veilkandliste` vk on fk.veilkandliste_db_id = vk.db_id
    where fk.utfall = 'FATT_JOBBEN'
        and vk.stillingskategori IN ('STILLING', 'FORMIDLING')
    group by tidspunkt_utfall_yearmonth, vk.stillingskategori
    order by tidspunkt_utfall_yearmonth
 """
df_usynlige = bq_client.query(query=query).to_dataframe()
```

```{python}
df_synlige["synlige_kandidater"] = True
df_usynlige["synlige_kandidater"] = False
```

```{python}
df = pd.concat([df_synlige, df_usynlige], ignore_index=True)
df = df.sort_values("tidspunkt_utfall_yearmonth")
```

```{python}
df.stillingskategori = df.stillingskategori.map(dict(STILLING="Formidlet via Rekbis", FORMIDLING="Etterregistrert i Rekbis"))
```

```{python}
def plot_antall_faatt_jobb(df, kolonne, kolonne_navn):
    fig = go.Figure()
    for stillingskategori in df.stillingskategori.unique():
        fig.add_trace(
            go.Scatter(
                x=df.loc[df.stillingskategori == stillingskategori, kolonne].unique(),
                y=df[df.stillingskategori == stillingskategori]
                .groupby(kolonne)
                .antall.sum(),
                name=stillingskategori,
                mode="lines+markers",
                line=dict(width=2),
                marker=dict(size=4),
            )
        )
    fig.update_layout(
        xaxis_title=kolonne_navn,
        yaxis_title="Antall kandidater",
    )

    return fig
```

```{python}
def plot_andel_etterregistrering(df, kolonne, kolonne_navn):
    antall_etterregistrering = (
        df[df.stillingskategori == "Etterregistrert i Rekbis"].groupby(kolonne).antall.sum()
    )
    totalt_antall = df.groupby(kolonne).antall.sum()

    andel_etterregistrering = antall_etterregistrering / totalt_antall
    andel_etterregistrering = andel_etterregistrering.reset_index()

    fig = go.Figure()
    fig.add_trace(
        go.Scatter(
            x=andel_etterregistrering[kolonne],
            y=andel_etterregistrering.antall,
            name="Andel etterregistrering",
            mode="lines+markers",
            line=dict(width=2),
            marker=dict(size=4),
        )
    )
    fig.update_layout(
        xaxis_title=kolonne_navn,
        yaxis_title="Andel",
        yaxis_tickformat = ',.1%',
    )
    fig.update_yaxes(range=[0, 1])

    return fig
```

```{python}
# Transformere måned til tertial
def yearmonth_to_tertial(yearmonth):
    year, month = yearmonth.split("-")
    month = int(month)
    if month <= 4:
        return f"{year}-T1"
    elif month <= 8:
        return f"{year}-T2"
    else:
        return f"{year}-T3"

df["tidspunkt_utfall_tertial"] = df["tidspunkt_utfall_yearmonth"].apply(
    yearmonth_to_tertial
)

df["tidspunkt_utfall_aar"] = df["tidspunkt_utfall_yearmonth"].str[:4]
```

## Row

```{python}
#| title: Antall formidlinger per måned
fig = plot_antall_faatt_jobb(df, "tidspunkt_utfall_yearmonth", "Måned")
fig.show()
```

```{python}
#| title: Antall formidlinger per tertial
fig = plot_antall_faatt_jobb(df, "tidspunkt_utfall_tertial", "Tertial")
fig.show()
```

```{python}
#| title: Antall formidlinger per år
fig = plot_antall_faatt_jobb(df, "tidspunkt_utfall_aar", "År")
fig.show()
```

## Row

```{python}
#| title: Andel etterregistrering per måned
fig = plot_andel_etterregistrering(df, "tidspunkt_utfall_yearmonth", "Måned")
fig.show()
```

```{python}
#| title: Andel etterregistrering per tertial
fig = plot_andel_etterregistrering(df, "tidspunkt_utfall_tertial", "Tertial")
fig.show()
```

```{python}
#| title: Andel etterregistrering per år
fig = plot_andel_etterregistrering(df, "tidspunkt_utfall_aar", "År")
fig.show()
```

# Etterregistrering per kontor (2024)

<span style="color:red;">
NB! Dette er ikke offisiell statistikk og må ikke deles utenfor NAV.
</span>

Kun data fra 2024.

## Row

```{python}
query = f"""
    select
        l.stillingskategori,
        navkontor,
        count(*) as antall
    from `rekrutteringsbistand_statistikk_pg15.kandidatutfall` u
        inner join `rekrutteringsbistand_kandidat.veilkandliste` l on u.stillingsid = l.stilling_id
    where u.utfall = 'FATT_JOBBEN'
        and l.stillingskategori IN ('STILLING', 'FORMIDLING')
        and tidspunkt >= '2024-01-01'
    group by l.stillingskategori, navkontor
    order by navkontor
    """
df_kontor = bq_client.query(query=query).to_dataframe()
```

```{python}
registrering = df_kontor[df_kontor.stillingskategori == "STILLING"].groupby("navkontor").antall.sum().rename("registrering")
etterregistrering = df_kontor[df_kontor.stillingskategori == "FORMIDLING"].groupby("navkontor").antall.sum().rename("etterregistrering")

df_kontor = pd.concat([registrering, etterregistrering], axis=1).reset_index().fillna(0)
df_kontor["andel_etterregistrering"] = df_kontor.etterregistrering / (df_kontor.registrering + df_kontor.etterregistrering)
```

```{python}
#| title: Antall kontorer per andel etterregistrering (2024)
fig = go.Figure(
    data=[
        go.Histogram(
            x=df_kontor.andel_etterregistrering,
            xbins=dict(
                start=0,
                end=1,
                size=0.1
            ),
        )
    ]
)
fig = fig.update_layout(
    xaxis_title="Andel etterregistrering",
    yaxis_title="Antall kontorer",
    xaxis_tickformat = ',.1%',
)
fig.show()
```

```{python}
#| title: Totalt antall formidlinger vs andel etterregistrering (2024)
fig = go.Figure(
    data=[
        go.Scatter(
            x=df_kontor.registrering + df_kontor.etterregistrering,
            y=df_kontor.andel_etterregistrering,
            mode='markers',
        )
    ]
)
fig = fig.update_layout(
    xaxis_title="Totalt antall formidlinger",
    yaxis_title="Andel etterregistrering",
    yaxis_tickformat = ',.1%',
)
fig.show()
```

## Row

```{python}
#| title: Antall kontorer per antall etterregistrert i Rekbis (2024)
fig = go.Figure(
    data=[
        go.Histogram(
            x=df_kontor.etterregistrering,
        )
    ]
)
fig = fig.update_layout(
    xaxis_title="Antall etterregistrert i Rekbis",
    yaxis_title="Antall kontorer",
)
fig.show()
```

```{python}
#| title: Antall kontorer per antall formidlet via Rekbis (2024)
fig = go.Figure(
    data=[
        go.Histogram(
            x=df_kontor.registrering
        )
    ]
)
fig = fig.update_layout(
    xaxis_title="Antall formidlet via Rekbis",
    yaxis_title="Antall kontorer",
)
fig.show()
```