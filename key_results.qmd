# Key results

<span style="color:red;">
NB! Dette er ikke offisiell statistikk og må ikke deles utenfor NAV.
</span>

```{python}
query = f"""
    select count(distinct stilling_id) from visning_kontaktinfo
    inner join kandidatliste
            on kandidatliste.stillings_id = visning_kontaktinfo.stilling_id::text
    inner join kandidatutfall
        on visning_kontaktinfo.stilling_id::text = kandidatutfall.stillingsid
        and visning_kontaktinfo.aktør_id = kandidatutfall.aktorid
    where (
        (alder < 30 or alder > 49) or
        (hull_i_cv is true) or
        (innsatsbehov in ('VARIG', 'BATT', 'BFORM'))
    );
    """
df_antall_kandidatlister_med_minst_en_kandidat_i_prioritert_maalgruppe_som_har_faatt_vist_sin_kontaktinfo = bq_client.query(query=query).to_dataframe()
```

```{python}
query = f"""
    select count(unike_kandidatlister.*) from (
        select distinct kandidatliste_id from kandidatliste
        where stilling_opprettet_tidspunkt is not null
    ) as unike_kandidatlister
    """
df_antall_kandidatlister_tilknyttet_stilling = bq_client.query(query=query).
to_dataframe()
```

```{python}
query = f"""
    with id_siste_utfall_per_kandidat_per_liste as (
        select max(id) from kandidatutfall 
        group by aktorid, kandidatlisteid
    ),
    fått_jobben_utfall as (
        select * from kandidatutfall 
        where id in (select * from id_siste_utfall_per_kandidat_per_liste)
        and utfall = 'FATT_JOBBEN'
    )
    select count(distinct kandidatliste_id)
    from kandidatliste
                inner join fått_jobben_utfall
                on fått_jobben_utfall.kandidatlisteid = kandidatliste.kandidatliste_id
                inner join stilling
                on kandidatliste.stillings_id = stilling.uuid
    where kandidatliste.stilling_opprettet_tidspunkt is not null
        and (stilling.stillingskategori = 'STILLING' or stilling.stillingskategori is null)
        and (
            (fått_jobben_utfall.alder < 30 or fått_jobben_utfall.alder > 49) or 
            (fått_jobben_utfall.hull_i_cv is true) or 
            (fått_jobben_utfall.innsatsbehov in ('VARIG', 'BATT', 'BFORM'))
        )
    """
df_antall_kandidatlister_der_minst_en_kandidat_i_prioritert_maalgruppe_fikk_jobben = bq_client.query(query=query).
to_dataframe()
```

```{python}
query = f"""
    with id_siste_utfall_per_kandidat_per_liste as (
        select max(id) from kandidatutfall 
        group by aktorid, kandidatlisteid
    ),
    presentert_utfall as (
        select * from kandidatutfall 
        where id in (select * from id_siste_utfall_per_kandidat_per_liste)
        and (utfall = 'FATT_JOBBEN' or utfall = 'PRESENTERT')
    )
    select count(distinct kandidatliste_id)
    from kandidatliste
                inner join presentert_utfall
                        on presentert_utfall.kandidatlisteid = kandidatliste.kandidatliste_id
                inner join stilling
                        on kandidatliste.stillings_id = stilling.uuid
    where kandidatliste.er_direktemeldt is true 
        and kandidatliste.stilling_opprettet_tidspunkt is not null
        and stilling.stillingskategori = 'STILLING' or stilling.stillingskategori is null;
    """
df_antall_direktemeldte_stillinger_med_minst_en_presentert_kandidat = bq_client.query(query=query).
to_dataframe()
```

```{python}
query = f"""
    select count(unike_kandidatlister.*) from (
        select distinct kandidatliste_id from kandidatliste
            where er_direktemeldt is true and stilling_opprettet_tidspunkt is not null
    ) as unike_kandidatlister
    """
df_antall_kandidatlister_tilknyttet_direktemeldt_stilling = bq_client.query(query=query).
to_dataframe()
```

```{python}
query = f"""
    select (
        concat(
            (extract(year from visning_kontaktinfo.tidspunkt))::text,
            '-',
            (extract(month from visning_kontaktinfo.tidspunkt))::text
        )
    ) maaned, count(distinct stilling_id)
    from visning_kontaktinfo
        inner join kandidatliste
            on kandidatliste.stillings_id = visning_kontaktinfo.stilling_id::text
        inner join kandidatutfall
            on visning_kontaktinfo.stilling_id::text = kandidatutfall.stillingsid
            and visning_kontaktinfo.aktør_id = kandidatutfall.aktorid
    where kandidatliste.stilling_opprettet_tidspunkt >= '2023-03-01'
        and (
            (alder < 30 or alder > 49) or
            (hull_i_cv is true) or
            (innsatsbehov in ('VARIG', 'BATT', 'BFORM'))
        )
    group by maaned;
    """
df_antall_kandidatlister_med_minst_en_kandidat_i_prioritert_maalgruppe_som_har_faatt_vist_sin_kontaktinfo_per_maaned = bq_client.query(query=query).
to_dataframe()
```

```{python}
query = f"""
    select (
        concat(
            (extract(year from unike_kandidatlister.stilling_opprettet_tidspunkt))::text,
            '-',
            (extract(month from unike_kandidatlister.stilling_opprettet_tidspunkt))::text
        )
    ) maaned,
    count(unike_kandidatlister.*)
    from (
        select distinct kandidatliste_id, stilling_opprettet_tidspunkt from kandidatliste
        where stilling_opprettet_tidspunkt is not null
    ) as unike_kandidatlister
    where unike_kandidatlister.stilling_opprettet_tidspunkt >= '2023-03-01'
    group by maaned
    """
df_antall_kandidatlister_tilknyttet_stilling_per_maaned = bq_client.query(query=query).
to_dataframe()
```

```{python}
query = f"""
    with id_siste_utfall_per_kandidat_per_liste as (
        select max(id) from kandidatutfall 
        group by aktorid, kandidatlisteid
    ),
    fått_jobben_utfall as (
        select * from kandidatutfall 
        where id in (select * from id_siste_utfall_per_kandidat_per_liste)
        and utfall = 'FATT_JOBBEN'
    )
    select (
        concat(
            (extract(year from stilling_opprettet_tidspunkt))::text,
            '-',
            (extract(month from stilling_opprettet_tidspunkt))::text
        )
    ) maaned,
    count(distinct kandidatliste_id)
    from kandidatliste
                inner join fått_jobben_utfall
                on fått_jobben_utfall.kandidatlisteid = kandidatliste.kandidatliste_id
                inner join stilling
                on kandidatliste.stillings_id = stilling.uuid
    where kandidatliste.stilling_opprettet_tidspunkt is not null
        and kandidatliste.stilling_opprettet_tidspunkt >= '2023-03-01'
        and (stilling.stillingskategori = 'STILLING' or stilling.stillingskategori is null)
        and (
            (fått_jobben_utfall.alder < 30 or fått_jobben_utfall.alder > 49) or 
            (fått_jobben_utfall.hull_i_cv is true) or 
            (fått_jobben_utfall.innsatsbehov in ('VARIG', 'BATT', 'BFORM'))
        )
    group by maaned
    """
df_antall_kandidatlister_der_minst_en_kandidat_i_prioritert_maalgruppe_fikk_jobben_per_maaned = bq_client.query(query=query).
to_dataframe()
```

```{python}
query = f"""
    with id_siste_utfall_per_kandidat_per_liste as (
        select max(id) from kandidatutfall
        group by aktorid, kandidatlisteid
    ),
    presentert_utfall as (
        select * from kandidatutfall
        where id in (select * from id_siste_utfall_per_kandidat_per_liste)
            and (utfall = 'FATT_JOBBEN' or utfall = 'PRESENTERT')
    )
    select (
        concat(
            (extract(year from unike_kandidatlister.stilling_opprettet_tidspunkt))::text,
            '-',
            (extract(month from unike_kandidatlister.stilling_opprettet_tidspunkt))::text
        )
    ) maaned,
    count(unike_kandidatlister.*)
    from (
        select distinct kandidatliste_id, stilling_opprettet_tidspunkt
        from kandidatliste
            inner join presentert_utfall
                on presentert_utfall.kandidatlisteid = kandidatliste.kandidatliste_id
            inner join stilling
                on kandidatliste.stillings_id = stilling.uuid
        where kandidatliste.er_direktemeldt is true
            and kandidatliste.stilling_opprettet_tidspunkt is not null
            and stilling.stillingskategori = 'STILLING' or stilling.stillingskategori is null
    ) as unike_kandidatlister
    where unike_kandidatlister.stilling_opprettet_tidspunkt >= '2023-03-01'
    group by maaned;
    """
df_antall_direktemeldte_stillinger_med_minst_en_presentert_kandidat_per_maaned = bq_client.query(query=query).
to_dataframe()
```

```{python}
query = f"""
    select (
        concat(
            (extract(year from unike_kandidatlister.stilling_opprettet_tidspunkt))::text,
            '-',
            (extract(month from unike_kandidatlister.stilling_opprettet_tidspunkt))::text
        )
    ) maaned,
    count(unike_kandidatlister.*)
    from (
        select distinct kandidatliste_id, stilling_opprettet_tidspunkt from kandidatliste
        where kandidatliste.er_direktemeldt is true and stilling_opprettet_tidspunkt is not null
    ) as unike_kandidatlister
    where unike_kandidatlister.stilling_opprettet_tidspunkt >= '2023-03-01'
    group by maaned
    """
df_antall_kandidatlister_tilknyttet_direktemeldt_stilling_per_maaned = bq_client.query(query=query).
to_dataframe()
```

## Row

```{python}
#| component: valuebox
#| title: Minst én i prioritert målgruppe fikk vist sin kontatktinfo
dict(
    icon = "eye",
    color = "primary",
    value = 1
)
```

```{python}
#| component: valuebox
#| title: Kandidater i prioritert målgruppe som fikk jobben
dict(
    icon = "check-circle",
    color = "warning",
    value = 1
)
```

```{python}
#| component: valuebox
#| title: Direktemeldte stillinger med minst én presentert kandidat
dict(
    icon = "card-checklist",
    value = 1
)
```